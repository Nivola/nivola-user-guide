.. _test_syntax:

1.1. Introduction
The reStructuredText (RST) syntax provides an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser system. However, you need to be very precise and stick to some strict rules:

like Python, RST syntax is sensitive to indentation !
RST requires blank lines between paragraphs
This entire document is written with the RST syntax. In the right sidebar, you should find a link show source, which shows the RST source code.

1.2. Text Formatting
1.2.1. Inline markup and special characters (e.g., bold, italic, verbatim)
There are a few special characters used to format text. The special character * is used to defined bold and italic text as shown in the table below. The backquote character ` is another special character used to create links to internal or external web pages as you will see in section Internal and External Links.

usage	syntax	HTML rendering
italic	*italic*	italic
bold	**bold**	bold
link	`python <www.python.org>`_	python
verbatim	``*``	*
The double backquote is used to enter in verbatim mode, which can be used as the escaping character. There are some restrictions about the * and `` syntax. They

cannot not be nested,
content may not start or end with whitespace: * text* is wrong,
it must be separated from surrounding text by non-word characters like a space.
The use of backslash is a work around to second previous restrictions about whitespaces in the following case:

this is a *longish* paragraph is correct and gives longish.
this is a long*ish* paragraph is not interpreted as expected. You should use this is a long\ *ish* paragraph to obtain longish paragraph
In Python docstrings it will be necessary to escape any backslash characters so that they actually reach reStructuredText. The simplest way to do this is to use raw strings by adding the letter r in front of the docstring.

Python string	Typical result
r"""\*escape* \`with` "\\""""	*escape* `with` "\"
"""\\*escape* \\`with` "\\\\""""	*escape* `with` "\"
"""\*escape* \`with` "\\""""	escape with ""
1.2.2. Headings
In order to write a title, you can either underline it or under and overline it. The following examples are correct titles.

*****
Title
*****

subtitle
########

subsubtitle
**********************
and so on
Two rules:

If under and overline are used, their length must be identical
The length of the underline must be at least as long as the title itself
Normally, there are no heading levels assigned to certain characters as the structure is determined from the succession of headings. However, it is better to stick to the same convention throughout a project. For instance:

# with overline, for parts
* with overline, for chapters
=, for sections
-, for subsections
^, for subsubsections
â€œ, for paragraphs